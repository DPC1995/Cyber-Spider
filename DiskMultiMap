#pragma once
#ifndef DISKMULTIMAP_H_
#define DISKMULTIMAP_H_

#include <string>
#include <cstring>
#include "MultiMapTuple.h"
#include "BinaryFile.h"
#include <functional>

const int MAX_DATA_LENGTH = 120;

class DiskMultiMap
{
public:

	class Iterator
	{
	public:
		Iterator();
		// You may add additional constructors
		Iterator(BinaryFile::Offset address, DiskMultiMap* dmm);
		bool isValid() const;
		Iterator& operator++();
		MultiMapTuple operator*();

	private:
		// Your private member declarations will go here
		BinaryFile::Offset location;
		DiskMultiMap* m_dmm;
	};

	DiskMultiMap();
	~DiskMultiMap();
	bool createNew(const std::string& filename, unsigned int numBuckets);
	bool openExisting(const std::string& filename);
	void close();
	bool insert(const std::string& key, const std::string& value, const std::string& context);
	Iterator search(const std::string& key);
	int erase(const std::string& key, const std::string& value, const std::string& context);

private:
	// Your private member declarations will go here
	struct Node
	{
		char key[121];
		char value[121];
		char context[121];
		BinaryFile::Offset next;
	};

	struct Header
	{
		// header struct total of 8 bytes long
		BinaryFile::Offset head;
		BinaryFile::Offset freeList;
	};
	BinaryFile bf;
	int nkeys;
	BinaryFile::Offset getNode();
	unsigned int strHashFunction(const string& hashThis);

};

#endif // DISKMULTIMAP_H_
